{
  "name": "APIConnect",
  "version": "0.6.0",
  "description": "A simplified Javascript interface for working with APIs.",
  "keywords": [
    "api",
    "rest",
    "routing",
    "cross-domain",
    "ajax"
  ],
  "homepage": "http://andrewplummer.github.com/APIConnect/",
  "author": {
    "name": "Andrew Plummer"
  },
  "main": "./lib/main",
  "directories": {
    "lib": "./lib"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/andrewplummer/APIConnect"
  },
  "dependencies": {
    "request": ">= 2.9.153",
    "jquery-deferred": ">= 0.2.0"
  },
  "engines": {
    "node": ">= 0.6.0"
  },
  "readme": "# APIConnect\n\nThis class creates a very easy and intuitive way to interact with APIs,\nmost commonly those hosted on other domains.\n\nSetup:\n\n```\nvar twitter = new APIConnect();\ntwitter.domain('api.twitter.com');\ntwitter.get('statuses/home_timeline');\ntwitter.getHomeTimeline();\n\n> GET http://api.twitter.com/statuses/home_timeline.json\n```\n\nThe route `statuses/home_timeline` will be automatically set up and accessible through a camelized\nmethod name in the api object. Calling the route is as simple as calling the method.\n\nWhen making the call, the first object is `params`. This will most commonly be added to the end of\nthe query string, but in cases where the route contains params such as `tweets/:tweet_id`, it will\nbe placed here instead and removed from the query string.\n\nThe second object passed is an options hash. This will override any default params and also end up\nbeing passed to the AJAX lib, in this case jQuery. Any valid option for `jQuery.ajax` is allowed here.\nThis means that all the standard callbacks will work:\n\n```\ntwitter.getHomeTimeline({}, {\n  success: function() {\n    // Congratulations!\n  },\n  error: function() {\n    // Oh noeee... failure!\n  }\n});\n```\n\nAPI calls will also pass back jQuery deferred objects, so these can be used as well:\n\n```\ntwitter.getHomeTimeline().then(function() {\n  // You're done!\n});\n```\n\nAny route can be set up with any level of context. These contexts are always optional, and will only be\nadded if they exist when passed as params:\n\n```\ntwitter.get(':user/:list_id/members');\ntwitter.getMembers({ user: 'bob', list_id: 5 });\n\n> GET http://api.twitter.com/bob/5/members.json\n```\n\nTo connect routes, the 4 main HTTP verbs, \"GET\", \"POST\", \"PUT\", and \"DELETE\" are supported, and map to\nthe method names \"get\", \"create\", \"update\", and \"destroy\", respectively (note \"del\", which is a reserved\nkeyword):\n\n```\ntwitter.post(':user/:list_id/members');\ntwitter.del(':user/:list_id/members');\n\ntwitter.createMember({ user: 'bob', list_id: 5, member_name: 'harry' });\n\n> POST http://api.twitter.com/bob/5/members.json?member_name=harry\n\ntwitter.destroyMember({ user: 'bob', list_id: 5 });\n\n> DELETE http://api.twitter.com/bob/5/members.json\n```\n\n\"resource\" serves as a shortcut to all 4 HTTP verbs:\n\n\n```\ntwitter.resource('member');\n\ntwitter.getMember();     > GET     http://api.twitter.com/member.json\ntwitter.createMember();  > POST    http://api.twitter.com/member.json\ntwitter.updateMember();  > PUT     http://api.twitter.com/member.json\ntwitter.destroyMember(); > DELETE  http://api.twitter.com/member.json\n```\n\nIf a resource is a collection, passing `collection: true` in the options for \"resource\" will create standard\ncollection routes including an \"index\" method:\n\n\n```\ntwitter.resource('status', { collection: true });\n\ntwitter.getStatus();              > GET     http://api.twitter.com/status.json\ntwitter.getStatus({ id: 3});      > GET     http://api.twitter.com/status/3.json\ntwitter.createStatus();           > POST    http://api.twitter.com/status.json\ntwitter.updateStatus({ id: 3 });  > PUT     http://api.twitter.com/status/3.json\ntwitter.destroyStatus({ id: 3 }); > DELETE  http://api.twitter.com/status/3.json\n```\n\nIf a \"collection\" is omitted, it will attempt to be intelligently detected by the pluralization of the\nresource passed. In this case, pluralization of the methods will also use intelligent detection:\n\n```\ntwitter.resource('members');\n\ntwitter.getMembers();              > GET     http://api.twitter.com/members.json\ntwitter.getMembers({ id: 3});      > GET     http://api.twitter.com/members/3.json\ntwitter.createMembers();           > POST    http://api.twitter.com/members.json\ntwitter.updateMembers({ id: 3 });  > PUT     http://api.twitter.com/members/3.json\ntwitter.destroyMembers({ id: 3 }); > DELETE  http://api.twitter.com/members/3.json\n```\n\n\n\n... more docs to come!\n\n",
  "readmeFilename": "README.md",
  "_id": "APIConnect@0.6.0",
  "dist": {
    "shasum": "8105a5fed9ec27ba35c58b67689d1ceda4690abd"
  },
  "_from": "APIConnect@",
  "_resolved": "https://registry.npmjs.org/APIConnect/-/APIConnect-0.6.0.tgz"
}
